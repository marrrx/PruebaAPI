// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PruebaAPI.db;

#nullable disable

namespace PruebaAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241104131603_FixesCategoryModel")]
    partial class FixesCategoryModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PruebaAPI.models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 187, DateTimeKind.Local).AddTicks(1670),
                            Name = "Protein"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 187, DateTimeKind.Local).AddTicks(1670),
                            Name = "Creatine"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 187, DateTimeKind.Local).AddTicks(1670),
                            Name = "Pre-Workout"
                        });
                });

            modelBuilder.Entity("PruebaAPI.models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PruebaAPI.models.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("PruebaAPI.models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 187, DateTimeKind.Local).AddTicks(1640),
                            Status = "Pendiente"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 187, DateTimeKind.Local).AddTicks(1650),
                            Status = "En proceso"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 187, DateTimeKind.Local).AddTicks(1650),
                            Status = "Completado"
                        });
                });

            modelBuilder.Entity("PruebaAPI.models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 188, DateTimeKind.Local).AddTicks(9950),
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Name = "Generic Frozen Soap",
                            Price = 797.0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 189, DateTimeKind.Local).AddTicks(360),
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            Name = "Licensed Wooden Computer",
                            Price = 632.71000000000004
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 189, DateTimeKind.Local).AddTicks(380),
                            Description = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality",
                            Name = "Awesome Steel Pants",
                            Price = 822.42999999999995
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 189, DateTimeKind.Local).AddTicks(410),
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            Name = "Rustic Soft Shoes",
                            Price = 33.899999999999999
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 189, DateTimeKind.Local).AddTicks(420),
                            Description = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design",
                            Name = "Rustic Frozen Gloves",
                            Price = 214.05000000000001
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 189, DateTimeKind.Local).AddTicks(440),
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Name = "Sleek Wooden Ball",
                            Price = 807.13999999999999
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 189, DateTimeKind.Local).AddTicks(460),
                            Description = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design",
                            Name = "Gorgeous Wooden Pants",
                            Price = 352.06999999999999
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 189, DateTimeKind.Local).AddTicks(480),
                            Description = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality",
                            Name = "Handmade Concrete Chicken",
                            Price = 637.38
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 189, DateTimeKind.Local).AddTicks(500),
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            Name = "Sleek Cotton Tuna",
                            Price = 379.56
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 189, DateTimeKind.Local).AddTicks(520),
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            Name = "Refined Metal Fish",
                            Price = 386.62
                        });
                });

            modelBuilder.Entity("PruebaAPI.models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 190, DateTimeKind.Local).AddTicks(1640),
                            ProductId = 5,
                            Url = "https://picsum.photos/640/480/?image=97"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 190, DateTimeKind.Local).AddTicks(1960),
                            ProductId = 6,
                            Url = "https://picsum.photos/640/480/?image=856"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 190, DateTimeKind.Local).AddTicks(1970),
                            ProductId = 1,
                            Url = "https://picsum.photos/640/480/?image=726"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 190, DateTimeKind.Local).AddTicks(1980),
                            ProductId = 10,
                            Url = "https://picsum.photos/640/480/?image=594"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 190, DateTimeKind.Local).AddTicks(1990),
                            ProductId = 8,
                            Url = "https://picsum.photos/640/480/?image=780"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 190, DateTimeKind.Local).AddTicks(1990),
                            ProductId = 1,
                            Url = "https://picsum.photos/640/480/?image=1081"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 190, DateTimeKind.Local).AddTicks(2000),
                            ProductId = 1,
                            Url = "https://picsum.photos/640/480/?image=994"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 190, DateTimeKind.Local).AddTicks(2010),
                            ProductId = 4,
                            Url = "https://picsum.photos/640/480/?image=648"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 190, DateTimeKind.Local).AddTicks(2010),
                            ProductId = 1,
                            Url = "https://picsum.photos/640/480/?image=272"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 190, DateTimeKind.Local).AddTicks(2020),
                            ProductId = 4,
                            Url = "https://picsum.photos/640/480/?image=290"
                        });
                });

            modelBuilder.Entity("PruebaAPI.models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 187, DateTimeKind.Local).AddTicks(1570),
                            Email = "example@example.com",
                            Name = "Usuario1",
                            Password = "1234"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 4, 7, 16, 3, 187, DateTimeKind.Local).AddTicks(1580),
                            Email = "example1@example.com",
                            Name = "Usuario2",
                            Password = "1234"
                        });
                });

            modelBuilder.Entity("PruebaAPI.models.Order", b =>
                {
                    b.HasOne("PruebaAPI.models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PruebaAPI.models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PruebaAPI.models.OrderDetail", b =>
                {
                    b.HasOne("PruebaAPI.models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PruebaAPI.models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PruebaAPI.models.Product", b =>
                {
                    b.HasOne("PruebaAPI.models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PruebaAPI.models.ProductImage", b =>
                {
                    b.HasOne("PruebaAPI.models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PruebaAPI.models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PruebaAPI.models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PruebaAPI.models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PruebaAPI.models.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("PruebaAPI.models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
